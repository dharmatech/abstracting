
This software has only been tested on Linux.

Everything works out of the box in Ypsilon Scheme.

Other Scheme's have specific instructions below.

The implementation versions that should be used:

    Ypsilon (svn)
    Larceny (svn)
    Chicken (3.4.0)

----------------------------------------------------------------------
* Install

To install, edit the file 'abstracting' and change the line:

    cd /root/abstracting

to point to the actuall abstracting directory on your system.
----------------------------------------------------------------------
* Quick start

Run one of:

    abstracting --ypsilon
    abstracting --larceny
    abstracting --chicken

At the Scheme prompt, try some demos:

    ((-> loader 'lib) "golden-section")

    ((-> loader 'lib) "trails")

    ((-> loader 'lib) "boids")

    ((-> loader 'lib) "cfdg/models/chiaroscuro")

    ((-> loader 'lib) "cfdg/models/spirales")

    ((-> loader 'lib) "cfdg/models/game1-turn6")

----------------------------------------------------------------------
* OpenGL on Larceny

On Larceny, you'll need to install these libraries:

    http://proteus.freeshell.org/gl.sls

    http://proteus.freeshell.org/glut.sls
----------------------------------------------------------------------
* OpenGL on Chicken

On Chicken, you'll need to install these standard eggs:

    vector-lib
    srfi-27

You'll also need these eggs which aren't at Eggs Unlimited:

    http://proteus.freeshell.org/c-style-opengl.egg

    http://proteus.freeshell.org/c-style-glut.egg

These currently install over the existing 'opengl' and 'glut' eggs if
they are there so take care.
----------------------------------------------------------------------
* xlib on Chicken

    cd support/chicken/xlib

    csc xlib.scm -dynamic -L/usr/X11R7/lib -lX11 -I/usr/X11R7/include

----------------------------------------------------------------------
* xlib on Larceny

    $ larceny

    > (load "support/larceny/xlib/xlib.sch")

    > (compile-file "support/larceny/xlib/xlib.sch")

Both of those steps take a while.
----------------------------------------------------------------------
* cons-wm

    > (: loader 'lib "cons-wm")

mod-4 + button-1 is drag   window
mod-4 + button-3 is resize window
mod-4 + Return   is rxvt
mod-4 + e        is emacsclient -c
mod-4 + 1        is switch-to-workspace 1
mod-4 + 2        is switch-to-workspace 2
mod-4 + 3        is switch-to-workspace 3
mod-4 + 4        is switch-to-workspace 4